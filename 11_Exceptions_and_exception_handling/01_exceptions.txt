
Error, exception handling
=========================

built-in exceptions
https://docs.python.org/3/library/exceptions.html

user defined exceptions
https://docs.python.org/3/tutorial/errors.html#tut-userexceptions

https://realpython.com/python-exceptions/


Syntax
------

try:
   # do something
   pass

except ValueError:
   # handle ValueError exception
   pass

except (TypeError, ZeroDivisionError):
   # handle multiple exceptions
   # TypeError and ZeroDivisionError
   pass

except:
   # handle all other exceptions
   pass

else:
   # if the try clause does not raise an exception
   pass

finally:
    # A finally clause is always executed before leaving the try statement,
    # whether an exception has occurred or not.
    pass



Raising user defined exception
==============================

Programs may name their own exceptions by creating a new exception class.
Exceptions should typically be derived from the Exception class, either directly or indirectly.


class MyException(Exception):
    pass

def my_function():
    if something_happened():
        raise MyException('Something happened')



Processing exception information
================================

as
--
Assign the exception to a variable


raise
-----
raise without a exception raises the last exception



try:
    with open('file.log') as file:
        read_data = file.read()

except FileNotFoundError as file_not_found_error:
    print(file_not_found_error)

except:
    print('Something happened, check the exception itself...')
    raise
