

Important built-in functions
============================

https://docs.python.org/3/library/functions.html


print(*objects, sep=' ', end='\n',
file=sys.stdout, flush=False)
----------------------------------
Print objects to the text stream file,
separated by sep and followed by end.
sep, end, file and flush, if present,
must be given as keyword arguments.

String interpolation:
https://docs.python.org/3/library/string.html#formatspec
https://pyformat.info/
https://realpython.com/python-f-strings/


input([prompt])
---------------
If the prompt argument is present, it is written
to standard output without a trailing newline.
The function then reads a line from input, converts
it to a string (stripping a trailing newline),
and returns that.
If the readline module was loaded, then input()
will use it to provide elaborate line editing
and history features.


all(iterable)
-------------
Return True if all elements of the iterable are true
(or if the iterable is empty).


any(iterable)
-------------
Return True if any element of the iterable is true.
If the iterable is empty, return False.


chr(i)
------
Return the string representing a character whose
Unicode code point is the integer i.
This is the inverse of ord()


class dict(**kwarg)
class dict(mapping, **kwarg)
class dict(iterable, **kwarg)
-----------------------------
Create a new dictionary.


dir([object])
-------------
Without arguments, return the list of names in the
current local scope. With an argument, attempt to
return a list of valid attributes for that object.


divmod(a, b)
------------
Take two (non complex) numbers as arguments and
return a pair of numbers consisting of their
quotient and remainder when using integer division.


enumerate(iterable, start=0)
----------------------------
Returns a tuple containing a count (from start which
defaults to 0) and the values obtained from
iterating over iterable.


eval(expression, globals=None, locals=None)
-------------------------------------------
The arguments are a string and optional globals and locals.
If provided, globals must be a dictionary. If provided,
locals can be any mapping object.
The expression argument is parsed and
evaluated as a Python expression


exec(object[, globals[, locals]])
---------------------------------
This function supports dynamic execution of Python code.
object must be either a string or a code object.
If it is a string, the string is parsed as a suite of
Python statements which is then executed
(Can be dangerous if object is unchecked user input)


filter(function, iterable)
--------------------------
Construct an iterator from those elements of
iterable for which function returns true.


class float([x])
----------------
Return a floating point number constructed from a
number or string x.


format(value[, format_spec])
----------------------------
Convert a value to a “formatted” representation, as
controlled by format_spec. The interpretation of
format_spec will depend on the type of the value
argument, however there is a standard formatting
syntax that is used by most built-in types:
Format Specification Mini-Language.
https://docs.python.org/3/library/string.html#formatspec
https://pyformat.info/
https://realpython.com/python-f-strings/


getattr(object, name[, default])
--------------------------------
Return the value of the named attribute of object.
If the named attribute does not exist, default is
returned if provided, otherwise AttributeError is raised.


globals()
---------
Return a dictionary representing the current global
symbol table. This is always the dictionary of the
current module (inside a function or method, this is
the module where it is defined, not the module from
which it is called).


hasattr(object, name)
---------------------
The arguments are an object and a string. The
result is True if the string is the name of
one of the object’s attributes, False if not.


hex(x)
------
Convert an integer number to a lowercase
hexadecimal string prefixed with “0x”.


class int([x])
class int(x, base=10)
---------------------
Return an integer object constructed from a number
or string x, or return 0 if no arguments are given.


isinstance(object, classinfo)
-----------------------------
Return true if the object argument is an
instance of the classinfo argument, or of a
(direct, indirect or virtual) subclass thereof.


issubclass(class, classinfo)
----------------------------
Return true if class is a subclass (direct, indirect
or virtual) of classinfo.


len(s)
------
Return the length (the number of items) of an object.
The argument may be a sequence (such as a string, bytes,
tuple, list, or range) or a collection (such as a
dictionary, set, or frozen set).


class list([iterable])
----------------------
Rather than being a function, list is actually a mutable
sequence type
Returns a list object


locals()
--------
Update and return a dictionary representing the
current local symbol table.


map(function, iterable, ...)
----------------------------
Return an iterator that applies function to
every item of iterable, yielding the results.
If additional iterable arguments are passed,
function must take that many arguments and is
applied to the items from all iterables in parallel.
With multiple iterables, the iterator stops when the
shortest iterable is exhausted.
For cases where the function inputs are already
arranged into argument tuples, see itertools.starmap().


max(iterable, *[, key, default])
max(arg1, arg2, *args[, key])
--------------------------------
Return the largest item in an iterable
or the largest of two or more arguments.


min(iterable, *[, key, default])
min(arg1, arg2, *args[, key])
--------------------------------
Return the smallest item in an iterable
or the smallest of two or more arguments.


next(iterator[, default])
-------------------------
Retrieve the next item from the iterator by
calling its __next__() method.
If default is given, it is returned if the
iterator is exhausted,
otherwise StopIteration is raised.


oct(x)
------
Convert an integer number to an octal string
prefixed with “0o”.


open(file, mode='r', buffering=-1, encoding=None,
errors=None, newline=None, closefd=True, opener=None)
-----------------------------------------------------
Open file and return a corresponding file object.
If the file cannot be opened, an OSError is raised.


ord(c)
------
Given a string representing one Unicode character,
return an integer representing the Unicode code point
of that character. For example, ord('a') returns the
integer 97 and ord('€') (Euro sign) returns 8364.
This is the inverse of chr().


pow(x, y[, z])
--------------
Return x to the power y; if z is present,
return x to the power y, modulo z
(computed more efficiently than pow(x, y) % z).


range(stop)
range(start, stop[, step])
--------------------------
Rather than being a function, range is
actually an immutable sequence type
Returns integers from start to stop with steps


repr(object)
------------
Return a string containing a printable
representation of an object.
Mainly used for debug purposes
See str()


reversed(seq)
-------------
Return a reverse iterator.


round(number[, ndigits])
------------------------
Return number rounded to ndigits precision after
the decimal point. If ndigits is omitted or is None,
it returns the nearest integer to its input.


class set([iterable])
---------------------
Return a new set object,
optionally with elements taken from iterable.


setattr(object, name, value)
----------------------------
This is the counterpart of getattr().
The arguments are an object, a string and an arbitrary value.
The string may name an existing attribute or a new attribute.
The function assigns the value to the attribute, provided
the object allows it.
For example, setattr(x, 'foobar', 123) is
equivalent to x.foobar = 123.


sorted(iterable, *, key=None, reverse=False)
--------------------------------------------
Return a new sorted list from the items in iterable.
Sorting HOW TO
https://docs.python.org/3/howto/sorting.html#sortinghowto


class str(object='')
class str(object=b'', encoding='utf-8', errors='strict')
--------------------------------------------------------
Return a str version of object.
print() function uses str to write out objects


sum(iterable[, start])
----------------------
Sums start and the items of an iterable from left to right
and returns the total. start defaults to 0. The iterable’s
items are normally numbers, and the start value is
not allowed to be a string.

For some use cases, there are good alternatives to sum().
The preferred, fast way to concatenate a sequence of strings
is by calling ''.join(sequence). To add floating point
values with extended precision, see math.fsum().
To concatenate a series of iterables, consider
using itertools.chain().


super([type[, object-or-type]])
-------------------------------
Return a proxy object that delegates method calls to a parent
or sibling class of type. This is useful for accessing
inherited methods that have been overridden in a class.
The search order is same as that used by getattr()
except that the type itself is skipped.


tuple([iterable])
-----------------
Rather than being a function, tuple is actually
an immutable sequence type
Returns a tuple object


class type(object)
class type(name, bases, dict)
-----------------------------
With one argument, return the type of an object.
The return value is a type object and generally
the same object as returned by object.__class__.

The isinstance() built-in function is recommended
for testing the type of an object, because it
takes subclasses into account.

With three arguments, return a new type object.
This is essentially a dynamic form of the class
statement. The name string is the class name and
becomes the __name__ attribute; the bases tuple
itemizes the base classes and becomes the __bases__
attribute; and the dict dictionary is the namespace
containing definitions for class body and is copied
to a standard dictionary to become the __dict__
attribute.


vars([object])
--------------
Return the __dict__ attribute for a module, class,
instance, or any other object with a __dict__ attribute.
Without an argument, vars() acts like locals().


zip(*iterables)
---------------
Make an iterator that aggregates elements
from each of the iterables.

Returns an iterator of tuples, where the i-th tuple contains
the i-th element from each of the argument sequences or
iterables. The iterator stops when the shortest input
iterable is exhausted. With a single iterable argument,
it returns an iterator of 1-tuples.
