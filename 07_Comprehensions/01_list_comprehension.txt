
List comprehensions
===================

The method list comprehension provides a
short way to create lists with an inline for cycle



numbers_1_9 = [number for number in range(1, 10)]
# ==> [1, 2, 3, 4, 5, 6, 7, 8, 9]



# creating list of square numbers until max
max = 150
print(list(x**2 for x in range(1, max+1) if x**2 <= max))
# ==> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]



Multiplication
--------------

four_nones_in_a_list = [None] * 4
# ==> [None, None, None, None]



four_apples = 'apple ' * 4
# ==> 'apple apple apple apple '


-- o --


Create a length-N list of lists
-------------------------------
Because lists are mutable, the * operator (as above)
will create a list of N references to the same list,
which is not likely what you want.

Wrong !!!:
list_of_lists = [[]] * 4

Instead, use a list comprehension:
list_of_four_lists = [[] for tmp in range(4)]


-- o --


# inverse dictionary (DRY way - Don't Repeat Yourself)

dict_by_numbers = {
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
}

dict_by_text = {
    value: key for key, value in dict_by_numbers.items()
}


-- o --


Inline condition
================
https://docs.python.org/2.5/whatsnew/pep-308.html

is_sun_shining = True
wear_sunglasses = 'yes' if is_sun_shining else 'no'
print(wear_sunglasses)
# ==> 'yes'

is_winter_now = False
temperature = 'low' if is_winter_now else 'high'
print(temperature)
# ==> 'high'
